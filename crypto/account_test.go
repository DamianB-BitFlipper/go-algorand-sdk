package crypto

import (
	"testing"

	"github.com/stretchr/testify/require"
	"golang.org/x/crypto/ed25519"

	"github.com/algorand/go-algorand-sdk/mnemonic"
	"github.com/algorand/go-algorand-sdk/types"
)

func TestGenerateAccount(t *testing.T) {
	kp := GenerateAccount()

	// Public key should not be empty
	require.NotEqual(t, ed25519.PublicKey{}, kp.PublicKey)

	// Public key should not be empty
	require.NotEqual(t, ed25519.PrivateKey{}, kp.PrivateKey)

	// Account should equal itself
	require.Equal(t, kp, kp)

	// Address should be identical to public key
	pk := ed25519.PublicKey(kp.Address[:])
	require.Equal(t, pk, kp.PublicKey)

	message := []byte("test message")
	sig := ed25519.Sign(kp.PrivateKey, message)
	// Public key should verify signature from private key
	require.True(t, ed25519.Verify(kp.PublicKey, message, sig))

	kp2 := GenerateAccount()
	// Calling the function again should produce a different account
	require.NotEqual(t, kp, kp2)
}

func TestAccountFromPrivateKey(t *testing.T) {
	t.Run("From seed + public key", func(t *testing.T) {
		expected := Account{
			PrivateKey: ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			PublicKey:  ed25519.PublicKey{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			Address:    types.Address{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
		}
		pk := expected.PrivateKey[:]

		actual, err := AccountFromPrivateKey(pk)
		require.NoError(t, err)

		require.Equal(t, expected, actual)
	})

	t.Run("From seed only", func(t *testing.T) {
		expected := Account{
			PrivateKey: ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			PublicKey:  ed25519.PublicKey{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			Address:    types.Address{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
		}
		pk := expected.PrivateKey.Seed() // get just the seed portion of the private key (first 32 bytes)

		actual, err := AccountFromPrivateKey(pk)
		require.NoError(t, err)

		require.Equal(t, expected, actual)
	})

	t.Run("From mnemonic", func(t *testing.T) {
		expected := Account{
			PrivateKey: ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			PublicKey:  ed25519.PublicKey{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
			Address:    types.Address{0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42},
		}
		m := "olympic cricket tower model share zone grid twist sponsor avoid eight apology patient party success claim famous rapid donor pledge bomb mystery security ability often"
		pk, err := mnemonic.ToPrivateKey(m)
		require.NoError(t, err)

		actual, err := AccountFromPrivateKey(pk)
		require.NoError(t, err)

		require.Equal(t, expected, actual)
	})
}

func TestMultisigAccount_Address(t *testing.T) {
	addr1, err := types.DecodeAddress("XMHLMNAVJIMAW2RHJXLXKKK4G3J3U6VONNO3BTAQYVDC3MHTGDP3J5OCRU")
	require.NoError(t, err)
	addr2, err := types.DecodeAddress("HTNOX33OCQI2JCOLZ2IRM3BC2WZ6JUILSLEORBPFI6W7GU5Q4ZW6LINHLA")
	require.NoError(t, err)
	addr3, err := types.DecodeAddress("E6JSNTY4PVCY3IRZ6XEDHEO6VIHCQ5KGXCIQKFQCMB2N6HXRY4IB43VSHI")
	require.NoError(t, err)
	ma, err := MultisigAccountWithParams(1, 2, []types.Address{
		addr1,
		addr2,
		addr3,
	})
	require.NoError(t, err)
	addrMultisig, err := ma.Address()
	require.NoError(t, err)
	require.Equal(t,
		"UCE2U2JC4O4ZR6W763GUQCG57HQCDZEUJY4J5I6VYY4HQZUJDF7AKZO5GM",
		addrMultisig.String(),
	)
}

func TestMultisigAccount_ZeroThreshInvalid(t *testing.T) {
	addr1, err := types.DecodeAddress("XMHLMNAVJIMAW2RHJXLXKKK4G3J3U6VONNO3BTAQYVDC3MHTGDP3J5OCRU")
	require.NoError(t, err)
	ma, err := MultisigAccountWithParams(1, 0, []types.Address{
		addr1,
	})
	require.Error(t, ma.Validate())
}

func TestMultisigAccount_Version1Only(t *testing.T) {
	addr1, err := types.DecodeAddress("XMHLMNAVJIMAW2RHJXLXKKK4G3J3U6VONNO3BTAQYVDC3MHTGDP3J5OCRU")
	require.NoError(t, err)
	ma, err := MultisigAccountWithParams(0, 1, []types.Address{
		addr1,
	})
	require.Error(t, ma.Validate())

	ma, err = MultisigAccountWithParams(2, 1, []types.Address{
		addr1,
	})
	require.Error(t, ma.Validate())
}

func TestLogicSigAddress(t *testing.T) {
	program := []byte{1, 32, 1, 1, 34}
	var args [][]byte

	expectedAddr, err := types.DecodeAddress("6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY")
	require.NoError(t, err)

	t.Run("no sig", func(t *testing.T) {
		var sk ed25519.PrivateKey
		var ma MultisigAccount

		lsig, err := MakeLogicSig(program, args, sk, ma)
		require.NoError(t, err)

		actualAddr := LogicSigAddress(lsig)
		require.Equal(t, expectedAddr, actualAddr)
	})

	t.Run("single sig", func(t *testing.T) {
		account, err := AccountFromPrivateKey(ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42})
		require.NoError(t, err)

		var ma MultisigAccount

		lsig, err := MakeLogicSig(program, args, account.PrivateKey, ma)
		require.NoError(t, err)

		// for backwards compatibility, we still expect the hashed program bytes address
		actualAddr := LogicSigAddress(lsig)
		require.Equal(t, expectedAddr, actualAddr)
	})

	t.Run("multi sig", func(t *testing.T) {
		ma, sk1, _, _ := makeTestMultisigAccount(t)
		require.NoError(t, err)

		lsig, err := MakeLogicSig(program, args, sk1, ma)
		require.NoError(t, err)

		// for backwards compatibility, we still expect the hashed program bytes address
		actualAddr := LogicSigAddress(lsig)
		require.Equal(t, expectedAddr, actualAddr)
	})
}

func TestLogicSigDelegatedAddress(t *testing.T) {
	program := []byte{1, 32, 1, 1, 34}
	var args [][]byte

	t.Run("no sig", func(t *testing.T) {
		var sk ed25519.PrivateKey
		var ma MultisigAccount

		lsig, err := MakeLogicSig(program, args, sk, ma)
		require.NoError(t, err)

		_, err = LogicSigDelegatedAddress(lsig)
		require.Error(t, err, errLsigNoSignature)
	})

	t.Run("single sig", func(t *testing.T) {
		account, err := AccountFromPrivateKey(ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42})
		require.NoError(t, err)

		var ma MultisigAccount

		lsig, err := MakeLogicSig(program, args, account.PrivateKey, ma)
		require.NoError(t, err)

		actualAddr, err := LogicSigDelegatedAddress(lsig)
		require.NoError(t, err)
		require.Equal(t, account.Address, actualAddr)
	})

	t.Run("multi sig", func(t *testing.T) {
		ma, sk1, _, _ := makeTestMultisigAccount(t)
		maAddr, err := ma.Address()
		require.NoError(t, err)

		lsig, err := MakeLogicSig(program, args, sk1, ma)
		require.NoError(t, err)

		actualAddr, err := LogicSigDelegatedAddress(lsig)
		require.NoError(t, err)
		require.Equal(t, maAddr, actualAddr)
	})
}

func TestLogicSigSigningAddress(t *testing.T) {
	program := []byte{1, 32, 1, 1, 34}
	var args [][]byte

	t.Run("no sig", func(t *testing.T) {
		var sk ed25519.PrivateKey
		var ma MultisigAccount

		expectedAddr, err := types.DecodeAddress("6Z3C3LDVWGMX23BMSYMANACQOSINPFIRF77H7N3AWJZYV6OH6GWTJKVMXY")
		require.NoError(t, err)

		lsig, err := MakeLogicSig(program, args, sk, ma)
		require.NoError(t, err)

		actualAddr, err := LogicSigSigningAddress(lsig)
		require.NoError(t, err)
		require.Equal(t, expectedAddr, actualAddr)
	})

	t.Run("single sig", func(t *testing.T) {
		account, err := AccountFromPrivateKey(ed25519.PrivateKey{0xd2, 0xdc, 0x4c, 0xcc, 0xe9, 0x98, 0x62, 0xff, 0xcf, 0x8c, 0xeb, 0x93, 0x6, 0xc4, 0x8d, 0xa6, 0x80, 0x50, 0x82, 0xa, 0xbb, 0x29, 0x95, 0x7a, 0xac, 0x82, 0x68, 0x9a, 0x8c, 0x49, 0x5a, 0x38, 0x5e, 0x67, 0x4f, 0x1c, 0xa, 0xee, 0xec, 0x37, 0x71, 0x89, 0x8f, 0x61, 0xc7, 0x6f, 0xf5, 0xd2, 0x4a, 0x19, 0x79, 0x3e, 0x2c, 0x91, 0xfa, 0x8, 0x51, 0x62, 0x63, 0xe3, 0x85, 0x73, 0xea, 0x42})
		require.NoError(t, err)

		var ma MultisigAccount

		lsig, err := MakeLogicSig(program, args, account.PrivateKey, ma)
		require.NoError(t, err)

		actualAddr, err := LogicSigSigningAddress(lsig)
		require.NoError(t, err)
		require.Equal(t, account.Address, actualAddr)
	})

	t.Run("multi sig", func(t *testing.T) {
		ma, sk1, _, _ := makeTestMultisigAccount(t)
		maAddr, err := ma.Address()
		require.NoError(t, err)

		lsig, err := MakeLogicSig(program, args, sk1, ma)
		require.NoError(t, err)

		actualAddr, err := LogicSigSigningAddress(lsig)
		require.NoError(t, err)
		require.Equal(t, maAddr, actualAddr)
	})
}
